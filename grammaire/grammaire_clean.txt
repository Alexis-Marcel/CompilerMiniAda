fichier -> "with Ada.Text_IO; use Ada.Text_IO;" 
fichier -> procedure ident is <decls>
fichier -> begin <instrs> end <hasident> ; EOF

decl -> type ident ; 
decl -> type ident is access ident ; 
decl -> type ident is record <champs> end record ; 
decl -> <identsep> : <type> <typexpr> ;
decl -> procedure ident <hasparams> is <decls> begin <instrs> end <hasident> ; 
decl -> function ident <hasparams> return <type> is <decls> begin <instrs> end <hasident> ;

decls -> <decl> <decls>
decls -> ''

hasident -> ident
hasident -> ''

identsep -> ident , <identsep>
identsep -> ident

champ -> <identsep> : <type> ;

champs -> <champ> <champs>
champs -> <champ>

type -> ident 
type -> access ident

params -> ( <paramsep> )

hasparams -> <params>
hasparams -> ''

paramsep -> <param> ; <paramsep>
paramsep -> <param>

typexpr -> := <expr>
typexpr -> ''

param -> <identsep> : <mode> <type>

mode -> in 
mode -> in out
mode -> ''

expr -> entier
expr -> caractère
expr -> true
expr -> false
expr -> null
expr -> ( <expr> )
expr -> accès
expr -> <expr> <opérateur> <expr> 
expr -> not <expr>
expr -> - <expr>
expr -> new ident
expr -> ident ( <exprsep> )
expr -> character ' val ( <expr> )


exprsep -> <expr> , <exprsep>
exprsep -> <expr>

hasexpr -> <expr>
hasexpr -> ''

instr -> <accès> := <expr> ; 
instr -> ident ; 
instr -> ident ( <exprsep> ) ; 
instr -> return <hasexpr> ; 
instr -> begin <instrs> end ;
instr -> if <expr> then <instrs> <elsif> <else> end if ; 
instr -> for ident in <hasreverse> <expr> .. <expr> loop <instrs> end loop ; 
instr -> while <expr> loop <instrs> end loop ;

elsif -> elsif <expr> then <instrs> <elsif>
elsif -> ''

else -> else <instrs>
else -> ''

hasreverse -> reverse
hasreverse -> ''

instrs -> <instr> <instrs>
instrs -> <instr>

opérateur -> = | /= | < | <= | > | >= | + | - | * | / | rem | and | and then | or | or else

accès -> ident | <expr> . ident

